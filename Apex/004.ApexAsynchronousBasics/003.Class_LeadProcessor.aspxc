global class LeadProcessor Implements 
		Database.Batchable<sObject>, Database.Stateful {
            
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordsUpdFailed = 0;            

    global Database.QueryLocator start(Database.BatchableContext bc) {
		return Database.getQueryLocator('Select Id, LeadSource, Description From Lead');
    }
            
    global void execute(Database.BatchableContext bc, List<Lead> sLead){
        // process each batch of records
        
        for (Lead x: sLead){
            x.Description = 'Batch Update: LeadSource. Prev. Value = '+x.LeadSource;
            x.LeadSource  = 'DreamForce';
            
            recordsProcessed += 1;
        }
        
        List<Database.SaveResult> sResult = new List<Database.SaveResult>();
        sResult = Database.Update(sLead, false);
        
        for (Database.SaveResult y: sResult){
            if (! y.isSuccess()){
                System.Debug('UpdateAccount Error:: Id['+y.Id+'] = '+y.getErrors()); 
                recordsUpdFailed += 1;
            }
        }
    }    

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' records processed. Shazam!');
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors, 
            JobItemsProcessed,
            TotalJobItems, CreatedBy.Email
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];
        // call some utility to send email
        //EmailUtils.sendMessage(a, recordsProcessed);
    }       
}